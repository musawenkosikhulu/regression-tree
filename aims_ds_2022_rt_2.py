# -*- coding: utf-8 -*-
"""AIMS_DS_2022_RT_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mrRVhb6WIl9qQNXmqbLwWazR3oCW9ss7

Monday 3rd Jan 2022

Regression tree practical

On the left, click on the folder icon and upload the boston.csv file.

## Task

Create a regression tree using the boston.csv data. Upload the data. Fill in the blanks accordingly.
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split

"""## Read in the data"""

# load dataset

df = pd.read_csv("boston.csv") # to do

df.head()

df.describe()

from google.colab import drive
drive.mount('/content/drive')

"""Print the number of rows in the dataset.
Expected value is 506
"""

#to do
len(df)

"""## Create X and y variables (features and target)"""

feature_cols = ['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax', 'ptratio', 'b', 'lstat']
X = df[feature_cols] # Features
y = df.medv

"""## Split data into training and testing"""

# Set 30% of the data for testing
X_train, X_test, y_train, y_test =  train_test_split(X, y, test_size=0.3, random_state=1) #to do

"""## Whenever you do some data manipulation, you should always check the resulting data

Get the shape of the training features.
Expected value is (354, 13)
"""

X_train.shape#to do

"""Get the shape of the training targets.
Expected value is (354,)
"""

y_train.shape #to do

"""Get the shape of the testing features.
Expected value is (152, 13)
"""

X_test.shape #to do

"""Get the shape of the testing targets.
Expected value is (152,)
"""

y_test.shape #to do

"""## Use scikit-learn to create the regression tree classifier.

API: https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html
"""

# Create regression tree classifier using the mean squared error criterion 
# and set a maximum depth of 3
reg_tree = DecisionTreeRegressor(criterion="squared_error",max_depth = 3,random_state=1)#to do

# Train Decision Tree Classifer on the training data
reg_tree = reg_tree.fit(X_train,y_train)

#Predict the targets for test dataset
y_pred = reg_tree.predict(X_test)#to do

"""## Evaluate on testing data"""

# Compare the model predictions to the true values on the test data
# use the mean squared error metric from scikit learn which you will have to import too!
from sklearn.metrics import mean_squared_error

print("mean squared error metric:",mean_squared_error(y_test, y_pred)) #to do

"""## Visualise the decision tree"""

import graphviz
from sklearn import tree
dot_data = tree.export_graphviz(reg_tree, out_file=None, 
                                feature_names=feature_cols,  
                                class_names=['0', '1'],
                                filled=True)

# Draw graph
graph = graphviz.Source(dot_data, format="png") 
graph

"""# Task

Print out the regression tree in text form. See this tutorial https://mljar.com/blog/visualize-decision-tree/ and scroll down to where it says "Visualizing the Decision Tree in Regression Task". The first example shows you how to print the tree in text form
"""

text_representation = tree.export_text(reg_tree)
print(text_representation) #to do